OR: "or"i
AND: "and"i
NOT: "not"i

EQ: "=="
NE: "!="
LT: "<"
LE: "<="
GT: ">"
GE: ">="

BWOR: "|"
XOR: "^"
BWAND: "&"
LSHIFT: "<<"
RSHIFT: ">>"
INVERT: "~"

POS: "+"
NEG: "-"
ADD: "+"
SUB: "-"
MUL: "*"
FLOORDIV: "/"
MOD: "%"
POW: "**"

TRUE: "true"i
FALSE: "false"i

HEX_DIGITS: /[0-9a-f][0-9a-f]*/i
DEC_DIGITS: /[0-9][0-9]*/
OCT_DIGITS: /[0-7][0-7]*/
BIN_DIGITS: /[01][01]*/

HEX: "0x"i
OCT: "0o"i
BIN: "0b"i

LPAR: "("
RPAR: ")"


expression: logical_or

logical_or: logical_or OR logical_and | logical_and
logical_and: logical_and AND logical_not | logical_not
logical_not: NOT logical_not | comparison

comparison: comparison compop bitwise_or | bitwise_or

bitwise_or: bitwise_or BWOR bitwise_xor | bitwise_xor
bitwise_xor: bitwise_xor XOR bitwise_and | bitwise_and
bitwise_and: bitwise_and BWAND bitwise_shift | bitwise_shift
bitwise_shift: bitwise_shift shiftop bitwise_neg | bitwise_neg
bitwise_neg: INVERT bitwise_neg | arith_sign

arith_sign: signop arith_sign | arith_term
arith_term: arith_term termop arith_fact | arith_fact
arith_fact: arith_fact factop arith_power | arith_power
arith_power: arith_power POW parenthesis | parenthesis

compop: EQ | NE | LT | LE | GT | GE
shiftop: LSHIFT | RSHIFT
signop: POS | NEG
termop: ADD | SUB
factop: MUL | FLOORDIV | MOD

parenthesis: LPAR expression RPAR | value
value: number | boolean

number: hex_number | dec_number | oct_number | bin_number
hex_number: HEX HEX_DIGITS
dec_number: DEC_DIGITS
oct_number: OCT OCT_DIGITS
bin_number: BIN BIN_DIGITS

boolean: TRUE | FALSE

